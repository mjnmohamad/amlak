import os
import time
from dotenv import load_dotenv
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

from pinecone import Pinecone, ServerlessSpec
from langchain_openai import OpenAIEmbeddings
from langchain_pinecone import PineconeVectorStore

load_dotenv()

# â”€â”€ ENV â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
DATABASE_URL         = os.getenv("DATABASE_URL")
OPENAI_API_KEY       = os.getenv("OPENAI_API_KEY")
PINECONE_API_KEY     = os.getenv("PINECONE_API_KEY")
PINECONE_ENVIRONMENT = os.getenv("PINECONE_ENVIRONMENT")
PINECONE_INDEX_NAME  = os.getenv("PINECONE_INDEX_NAME", "listings-index")

# â”€â”€ Ø§Ø¹ØªØ¨Ø§Ø±Ø³Ù†Ø¬ÛŒ Ù…ØªØºÛŒØ±Ù‡Ø§ÛŒ Ù…Ø­ÛŒØ·ÛŒ â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
if not (DATABASE_URL and OPENAI_API_KEY and PINECONE_API_KEY and PINECONE_ENVIRONMENT):
    raise RuntimeError(
        "Missing one of DATABASE_URL, OPENAI_API_KEY, PINECONE_API_KEY or PINECONE_ENVIRONMENT"
    )

# Ø¨Ø±Ø§ÛŒ Ø¯ÛŒØ¨Ø§Ú¯ØŒ Ø§Ú¯Ø± Ø®ÙˆØ§Ø³ØªÛŒØ¯ Ù„Ø§Ú¯ Ø¨Ú¯ÛŒØ±ÛŒØ¯:
print("ðŸ”— DATABASE_URL:", DATABASE_URL)
print("ðŸ”‘ OPENAI_API_KEY set?", bool(OPENAI_API_KEY))
print("ðŸŒ² PINECONE_ENVIRONMENT:", PINECONE_ENVIRONMENT)

# â”€â”€ SQLAlchemy â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
engine  = create_engine(DATABASE_URL, pool_pre_ping=True, future=True)
Session = sessionmaker(bind=engine, autoflush=False, autocommit=False)

def get_db():
    db = Session()
    try:
        yield db
    finally:
        db.close()

# â”€â”€ Pinecone Client â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
pc = Pinecone(
    api_key= PINECONE_API_KEY,
    environment= PINECONE_ENVIRONMENT,
)

# Ø§Ú¯Ø± Ø§ÛŒÙ†Ø¯Ú©Ø³ ÙˆØ¬ÙˆØ¯ Ù†Ø¯Ø§Ø´ØªØŒ Ø§ÛŒØ¬Ø§Ø¯Ø´ Ú©Ù†
existing = [info["name"] for info in pc.list_indexes()]
if PINECONE_INDEX_NAME not in existing:
    pc.create_index(
        name= PINECONE_INDEX_NAME,
        dimension= 1536,
        metric= "cosine",
        spec= ServerlessSpec(cloud="aws", region="us-east-1"),
    )
    while not pc.describe_index(PINECONE_INDEX_NAME).status["ready"]:
        time.sleep(1)

index = pc.Index(PINECONE_INDEX_NAME)

# â”€â”€ Embeddings & VectorStore â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
embeddings = OpenAIEmbeddings(openai_api_key=OPENAI_API_KEY)

vector_store = PineconeVectorStore(
    index=index,
    embedding=embeddings,
    text_key="text",
)









# # â”€â”€â”€ config.py â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# import os
# from dotenv import load_dotenv
# from sqlalchemy import create_engine
# from sqlalchemy.orm import sessionmaker
# import pinecone
# from langchain.embeddings           import OpenAIEmbeddings
# from langchain_community.vectorstores import (
#     Pinecone as PineconeVectorStore   # Ù†Ø³Ø®Ù‡Ù” Ø¬Ø¯ÛŒØ¯ Ù…Ø§Ú˜ÙˆÙ„
# )

# # â”€â”€ env ---------------------------------------------------------------------
# load_dotenv()

# OPENAI_API_KEY   = os.getenv("OPENAI_API_KEY")
# PINECONE_API_KEY = os.getenv("PINECONE_API_KEY")
# PINECONE_ENV     = os.getenv("PINECONE_ENVIRONMENT")
# INDEX_NAME       = os.getenv("PINECONE_INDEX_NAME") or "listings-index"
# DATABASE_URL     = os.getenv("DATABASE_URL")         # Ù…Ø«Ù„:  mysql+pymysql://user:pass@host/db
# MODEL_TYPE       = os.getenv("MODEL_TYPE", "gpt-4o")

# # â”€â”€ SQLAlchemy --------------------------------------------------------------
# if not DATABASE_URL:
#     raise RuntimeError("DATABASE_URL not set in environment!")

# engine   = create_engine(DATABASE_URL, pool_pre_ping=True)
# Session  = sessionmaker(bind=engine, autoflush=False, autocommit=False)

# def get_db():
#     """Dependency Ø¨Ø±Ø§ÛŒ FastAPIâ€”Ù‡Ø± Ø¯Ø±Ø®ÙˆØ§Ø³Øª ÛŒÚ© Session Ù…Ø³ØªÙ‚Ù„."""
#     db = Session()
#     try:
#         yield db
#     finally:
#         db.close()

# # â”€â”€ Pinecone & Vector-Store -------------------------------------------------
# pinecone.init(api_key=PINECONE_API_KEY, environment=PINECONE_ENV)
# index = pinecone.Index(INDEX_NAME)

# embeddings = OpenAIEmbeddings(openai_api_key=OPENAI_API_KEY)

# # Ø§ÛŒÙ† Ø´ÛŒØ¡ Ø¯Ø± Ù‡Ù…Ù‡Ù” Ø³Ø±ÙˆÛŒØ³â€ŒÙ‡Ø§ share Ù…ÛŒâ€ŒØ´ÙˆØ¯
# vector_store = PineconeVectorStore.from_existing_index(
#     index_name = INDEX_NAME,
#     embedding  = embeddings,
#     text_key   = "text"        # Ú©Ù„ÛŒØ¯ Ù…ØªÙ†ÛŒ Ú©Ù‡ Ø¯Ø± ingest.py Ø°Ø®ÛŒØ±Ù‡ Ú©Ø±Ø¯ÛŒÙ…
# )

